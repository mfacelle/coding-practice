public class TheLuckyString 
{

	/**
		John and Brus are studying string theory at the university. 
		According to Brus, a string is called lucky if no two consecutive characters are equal. 
		John is analyzing a String s, 
		and he wants to know how many distinct lucky strings can be generated by reordering the letters in s. 
		If s is a lucky string in its original ordering, it should also be considered in the count.
 
		Constraints
		-	s will contain between 1 and 10 characters, inclusive.
		-	Each character of s will be a lowercase letter ('a' - 'z').
	
	 */
	public int count(String s) {
		// scan string for duplicate chars - will need to store number of occurrences of each char (hashtable?)
		// if no duplicates exist, return factorial(s.length())
		
		// check if, given all duplicates, a lucky string is even possible
		
		// compute number of possible lucky strings
	}
	
	// ---
	
	/** helper method to compute factorials */
	public static int factorial(int n) {
		if (n <= 1) {
			return 1;
		}
		return n * factorial(n-1);
	}
	
	// ---
	
	/** determines if a string is a valid lucky string */
	public boolean isLucky(String s) {
		// go up to second-to-last char and compare current and next char
		for (int i = 0; i < s.length()-1; i++) {
			// if any adjacent chars are matching, not a lucky string
			if (s.charAt(i) == s.charAt(i+1)) {
				return false;
			}
		}
		return true;
	}

}

/*
	THOUGHTS ETC
	
	- if all characters are distinct, then n! "lucky" strings can be created (all re-orderings of every char)
	- if not all chars are distinct, for a single lucky string to be generated:
	- numOccurrences of most common char must be <= (s.length() / 2) ~ or (s.length()/2 + 1) for strings with odd number of chars
	
	- due to CONSTRAINT #1: strings are tiny - can just brute force it, if need be
	- BUT: want to find better solution for when string lengths can be huge
	
	- simple brute-force solution:
	- compute every permutation of the string [O(n!)], check if valid [O(n)], and add to set if unique


*/